<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import   namespace="System.Globalization" #>
<#@ include  file=".\..\..\..\DrmSharp.Core\Api\v1\Definitions\DrmApiTypeDef.t4" #>
<#@ include  file=".\..\..\..\DrmSharp.Core\Api\v1\Definitions\DrmApiMethodDef.t4" #>
<#@ output   extension=".cs" #>
// Auto Generated, do not edit.
using DrmSharp;
using DrmSharp.Api.v1;
using DrmSharp.Interfaces;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace DrmSharp.Api.v1
{

	/// <summary>
    /// DrmApi defines api methods to interface with a http handler
    /// </summary>
    public class DrmApi
    { 
        public DrmConfigurator Config { get; set; }
        public IHttpHandler HttpHandler { get; set; }

		/// <summary>
        /// Drm Client api constructor.
        /// </summary>
        /// <param name="config">Configures client parameters</param>
        /// <param name="httpHandler">Http handler implementation</param>
        public DrmApi(DrmConfigurator config, IHttpHandler httpHandler)
        {
           Config = config;
           HttpHandler = httpHandler;
        }

<# foreach (var method in apiMethods) { #>
<#   if(method.Request == null) { #>
<#		if(!string.IsNullOrWhiteSpace(method.ResponseGenericTypes)) {#>
		public async Task<<#= SnakeCaseToPascalCase(method.Name) #>Response<#= method.ResponseGenericTypes #>> <#= SnakeCaseToPascalCase(method.Name) #><#= method.ResponseGenericTypes #>()
        {
            var url = string.Format("{0}/v1/<#= method.Module #>/<#= method.Name #>", Config.HttpEndpoint);
<#        if(method.IsResponseCollection) { #>
			return new <#= SnakeCaseToPascalCase(method.Name) #>Response() { <#= EscapeKeyWords(method.Response[0].Name) #> = await HttpHandler.GetJsonAsync<<#= method.Response[0].Type#>>(url) };
<#        } else { #>
            return await HttpHandler.GetJsonAsync<<#= SnakeCaseToPascalCase(method.Name) #>Response<#= method.ResponseGenericTypes #>>(url);
<#        } #>
        }
<#      } #>
		public async Task<<#= SnakeCaseToPascalCase(method.Name) #>Response> <#= SnakeCaseToPascalCase(method.Name) #>()
        {
            var url = string.Format("{0}/v1/<#= method.Module #>/<#= method.Name #>", Config.HttpEndpoint);
<#        if(method.IsResponseCollection) { #>
			return new <#= SnakeCaseToPascalCase(method.Name) #>Response() { <#= EscapeKeyWords(method.Response[0].Name) #> = await HttpHandler.GetJsonAsync<<#= method.Response[0].Type#>>(url) };
<#        } else { #>
            return await HttpHandler.GetJsonAsync<<#= SnakeCaseToPascalCase(method.Name) #>Response>(url);
<#        } #>
        }
<#   } else { #>
<#		if(!string.IsNullOrWhiteSpace(method.ResponseGenericTypes)) {#>
		public async Task<<#= SnakeCaseToPascalCase(method.Name) #>Response<#= method.ResponseGenericTypes #>> <#= SnakeCaseToPascalCase(method.Name) #><#= method.ResponseGenericTypes #>(<#= SnakeCaseToPascalCase(method.Name) #>Request data<#= method.IsCachable ? ", bool reload = false" : "" #>)
        {
            var url = string.Format("{0}/v1/<#= method.Module #>/<#= method.Name #>", Config.HttpEndpoint);
<#        if(method.IsResponseCollection) { #>
			return new <#= SnakeCaseToPascalCase(method.Name) #>Response() { <#= EscapeKeyWords(method.Response[0].Name) #> = await httpHandler.PostJson<#= method.IsCachable ? "WithCache" : "" #>Async<<#= method.Response[0].Type#>>(url, data<#= method.IsCachable ? ", reload" : "" #>) };
<#        } else { #>
            return await HttpHandler.PostJson<#= method.IsCachable ? "WithCache" : "" #>Async<<#= SnakeCaseToPascalCase(method.Name) #>Response<#= method.ResponseGenericTypes #>>(url, data<#= method.IsCachable ? ", reload" : "" #>);
<#        } #>
        }
<#      } #>
		public async Task<<#= SnakeCaseToPascalCase(method.Name) #>Response> <#= SnakeCaseToPascalCase(method.Name) #>(<#= SnakeCaseToPascalCase(method.Name) #>Request data<#= method.IsCachable ? ", bool reload = false" : "" #>)
        {
            var url = string.Format("{0}/v1/<#= method.Module #>/<#= method.Name #>", Config.HttpEndpoint);
<#        if(method.IsResponseCollection) { #>
			return new <#= SnakeCaseToPascalCase(method.Name) #>Response() { <#= EscapeKeyWords(method.Response[0].Name) #> = await HttpHandler.PostJson<#= method.IsCachable ? "WithCache" : "" #>Async<<#= method.Response[0].Type#>>(url, data<#= method.IsCachable ? ", reload" : "" #>) };
<#        } else { #>
            return await HttpHandler.PostJson<#= method.IsCachable ? "WithCache" : "" #>Async<<#= SnakeCaseToPascalCase(method.Name) #>Response>(url, data<#= method.IsCachable ? ", reload" : "" #>);
<#        } #>
        }
<#   } #>
<# } #>
    }
}
